// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id            String    @id @default(cuid())
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt
  email         String    @unique
  emailVerified DateTime?
  name          String?
  image         String?
  role          UserRole  @default(USER)
  profile       Profile?
  bookings      Booking[]
  provider      Provider?
}

model Profile {
  id            String   @id @default(cuid())
  userId        String   @unique
  user          User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  bio           String?
  skinType      String?
  skinConcerns  String[]
  preferences   Json?
  loyaltyPoints Int      @default(0)
}

model Provider {
  id          String    @id @default(cuid())
  userId      String    @unique
  user        User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  name        String
  description String?
  location    String?
  categories  String[]
  rating      Float?
  services    Service[]
}

model Service {
  id          String    @id @default(cuid())
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
  name        String
  description String?
  duration    Int       // in minutes
  price       Decimal
  providerId  String
  provider    Provider  @relation(fields: [providerId], references: [id], onDelete: Cascade)
  category    String?
  bookings    Booking[]
  images      String[]
}

model Booking {
  id        String   @id @default(cuid())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  date      DateTime
  status    Status   @default(PENDING)
  userId    String
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  serviceId String
  service   Service  @relation(fields: [serviceId], references: [id], onDelete: Cascade)
  notes     String?
}

enum UserRole {
  USER
  PROVIDER
  ADMIN
}

enum Status {
  PENDING
  CONFIRMED
  CANCELLED
  COMPLETED
} 